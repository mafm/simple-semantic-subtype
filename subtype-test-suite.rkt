#lang typed/racket/base

(require "base-lang.rkt"
         "set-utils.rkt"
         "tunit.rkt")

(provide (all-defined-out))

(: run-subtype-tests (-> (-> Type Type Boolean) Void))
(define (run-subtype-tests subtype?)
  ;; basic tests
  (check-true  (subtype? Int Univ))
  (check-true  (subtype? (Not Int) (Not Nat)))
  (check-true  (subtype? (Not Int) (Not NegInt)))
  (check-false (subtype? (Not Nat) (Not Int)))
  (check-false (subtype? (Not NegInt) (Not Int)))
  (check-false (subtype? Univ Int))
  (check-true  (subtype? Empty Int))
  (check-true  (subtype? Empty Empty))
  (check-true  (subtype? (Not Empty) Univ))
  (check-false (subtype? Int Empty))
  
  ;; range tests
  (check-true  (subtype? PosInt Int))
  (check-true  (subtype? NegInt Int))
  (check-false (subtype? Int PosInt))
  (check-false (subtype? Int NegInt))
  (check-false (subtype? PosInt NegInt))
  (check-false (subtype? NegInt PosInt))
  (check-true  (subtype? PosInt Nat))
  (check-true  (subtype? PosInt Nat))
  
  ;; tests with unions
  (check-true  (subtype? (Or (set NegInt PosInt)) Int))
  (check-true  (subtype? (Or (set NegInt Nat)) Int))
  (check-false (subtype? Int (Or (set NegInt PosInt))))
  (check-true  (subtype? Int (Or (set NegInt Nat))))
  (check-true  (subtype? Int (Or (set Int Unit))))
  (check-true  (subtype? Int (Or (set Int Bool))))
  (check-true  (subtype? Bool (Or (set Int Bool))))
  (check-true  (subtype? Empty (Or (set Int Bool))))
  (check-true  (subtype? Bool (Or (set Empty Bool))))
  (check-false (subtype? (Or (set Int Unit)) Int))
  (check-false (subtype? Bool Int))
  (check-false (subtype? Int Bool))
  (check-false (subtype? (Or (set Int Bool)) Empty))
  
  ;; tests with intersections
  (check-true  (subtype? (And (set Int Unit)) Int))
  (check-true  (subtype? (And (set Int Unit (Not Univ))) Int))
  (check-true  (subtype? (And (set Int Bool (Not Bool))) Int))
  (check-true  (subtype? (And (set Int (Not NegInt))) Nat))
  (check-true  (subtype? Nat (And (set Int (Not NegInt)))))
  (check-false (subtype? (And (set Int (Not PosInt))) NegInt))
  (check-true  (subtype? (And (set Int (Not Nat))) NegInt))
  (check-true  (subtype? NegInt (And (set Int (Not PosInt)))))
  (check-true  (subtype? (And (set Int Unit)) Int))
  (check-false (subtype? Int (And (set Int Unit))))
  (check-true  (subtype? (And (set (Or (set Int Unit))
                                   (Or (set Int Bool))))
                         Int))
  (check-true  (subtype? Int
                         (And (set (Or (set Int Unit))
                                   (Or (set Int Bool))))))
  
  ;; tests with products
  (check-true  (subtype? (Prod Int Int) (Prod Univ Univ)))
  (check-true  (subtype? (Prod Empty Int) (Prod Int Int)))
  (check-true  (subtype? (Prod Int Empty) (Prod Int Int)))
  (check-true  (subtype? (Prod Int Int) (Prod Int Univ)))
  (check-true  (subtype? (Prod Int Int) (Prod Univ Int)))
  (check-true  (subtype? (Prod Int Int) (Prod Int Int)))
  (check-false (subtype? (Prod Int Int) (Prod Empty Int)))
  (check-false (subtype? (Prod Int Int) (Prod Int Empty)))
  (check-false (subtype? (Prod Int Int) (Prod Empty Empty)))
  (check-false (subtype? (Prod Int Int) (Prod Bool Int)))
  (check-false (subtype? (Prod Int Int) (Prod Int Bool)))
  (check-true  (subtype? (Prod Int Int) (Prod (Or (set Int Bool)) Int)))
  (check-true  (subtype? (Prod Int Int) (Prod Int (Or (set Int Bool)))))
  (check-false (subtype? (Prod (Or (set Int Bool)) Int)
                         (Prod Int Int)))
  (check-false (subtype? (Prod Int (Or (set Int Bool)))
                         (Prod Int Int)))
  (check-true  (subtype? (And (set (Prod Univ Int)
                                   (Prod Int Univ)))
                         (Prod Int Int)))
  (check-true  (subtype? (Prod Int Int)
                         (And (set (Prod Univ Int)
                                   (Prod Int Univ)))))
  (check-true  (subtype? (Prod Int Int)
                         (And (set (Prod (Or (set Bool Int)) Int)
                                   (Prod (Not Bool) (Or (set Bool Int)))))))
  (check-true  (subtype? (Prod Int Int)
                         (And (set (Prod Univ Int)
                                   (Prod Int Univ)))))
  (check-false (subtype? (Prod (Or (set Int Bool))
                               (Or (set Int Bool)))
                         (Or (set (Prod Int Bool)
                                  (Prod Bool Int)))))
  (check-true (subtype? (Or (set (Prod Int Bool)
                                 (Prod Bool Int)))
                        (Prod (Or (set Int Bool))
                              (Or (set Int Bool)))))
  (check-true (subtype? (Prod (Prod (Or (set Int Bool))
                                    (Or (set Int Bool)))
                              (Prod (Or (set Int Bool))
                                    (Or (set Int Bool))))
                        (Prod (Or (set (Prod Int Int)
                                       (Prod Bool Int)
                                       (Prod Int Bool)
                                       (Prod Bool Bool)))
                              (Or (set (Prod Int Int)
                                       (Prod Bool Int)
                                       (Prod Int Bool)
                                       (Prod Bool Bool))))))
  
  ;; tests with arrows
  (check-true  (subtype? (Arrow Int Int) (Arrow Int Univ)))
  (check-true  (subtype? (Arrow Univ Int) (Arrow Int Univ)))
  (check-false (subtype? (Arrow Int Int) (Arrow Univ Int)))
  (check-false (subtype? (Arrow Int Univ) (Arrow Int Int)))
  (check-true  (subtype? (And (set (Arrow NegInt NegInt)
                                   (Arrow Nat    Nat)))
                         (Arrow Int Int)))
  (check-false  (subtype? (Arrow Int Int)
                          (And (set (Arrow NegInt NegInt)
                                    (Arrow Nat    Nat)))))
  (display-test-results))
